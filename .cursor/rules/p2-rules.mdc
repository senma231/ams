---
description: 
globs: 
alwaysApply: true
---
    # PROJECT RULES
    
    ## 1. 项目概述
    本项目是一个基于 **SQLite3** 的资产管理系统，部署在 **Debian** 服务器上，使用 **Node.js + Vue.js** 技术栈开发。  
    以下规则适用于所有开发、测试和部署流程。
    
    ---
    
    ## 2. 开发规范
    
    ### 2.1 代码风格
    - **后端 (Node.js)**：
      - 使用 `ESLint` + `Prettier` 规范代码。
      - 缩进：2 个空格。
      - 变量命名：`camelCase`。
      - 常量命名：`UPPER_SNAKE_CASE`。
      - 导出模块：优先使用 `module.exports`。
      - 异步操作：统一使用 `async/await`。
    
    - **前端 (Vue.js)**：
      - 使用 `Vue 3` 的 `<script setup>` 语法。
      - 组件命名：`PascalCase`（如 `AssetList.vue`）。
      - 状态管理：使用 `Pinia` 替代 Vuex。
      - API 调用：封装为 `useApi` 组合式函数。
    
    ### 2.2 分支管理
    - **分支命名**：
      - 主分支：`main`（保护分支，禁止直接推送）。
      - 开发分支：`dev`。
      - 功能分支：`feat/<feature-name>`（如 `feat/user-auth`）。
      - 修复分支：`fix/<issue-name>`（如 `fix/asset-export`）。
    
    - **合并流程**：
      1. 从 `dev` 拉取最新代码。
      2. 开发完成后提交 **Pull Request (PR)** 到 `dev`。
      3. 至少需要 **1 名** 团队成员审核通过后合并。
    
    ### 2.3 提交消息
    - 格式：`<type>(<scope>): <subject>`。
      - `type`：`feat`（新功能）、`fix`（修复）、`docs`（文档）、`style`（样式）、`refactor`（重构）、`test`（测试）。
      - `scope`：模块名（如 `asset`、`user`）。
      - `subject`：简短描述（不超过 50 字符）。
    
    **示例**：
    ```plaintext
    feat(asset): 添加资产领用功能
    fix(report): 修复导出报表时的空数据问题
    

* * *

3. 协作规则

-------

### 3.1 任务分配

* 使用 **GitHub Projects** 或 **Trello** 管理任务。
* 每个任务需明确：
  * 负责人。
  * 截止时间。
  * 优先级（P0-P3）。

### 3.2 代码审查

* 审查内容：
  * 功能是否符合需求。
  * 代码风格是否一致。
  * 是否有潜在的性能或安全问题。
* 审查工具：GitHub PR 或 **Cursor 的代码评审插件**。

### 3.3 沟通方式

* 日常沟通：**Slack/Discord**。
* 紧急问题：@负责人 + 电话通知。
* 会议：每周一 10:00 站会（远程）。

* * *

4. 测试与部署

--------

### 4.1 测试要求

* **单元测试**：覆盖率需达到 **80%** 以上。
* **集成测试**：测试 API 和数据库交互。
* **测试工具**：
  * 后端：`Jest` + `Supertest`。
  * 前端：`Vitest` + `Testing Library`。

### 4.2 部署流程

1. **预发布环境**：
   
   * 分支：`release`。
   * 自动触发 CI/CD（GitHub Actions）。

2. **生产环境**：
   
   * 手动从 `release` 合并到 `main`。
   
   * 部署命令：
     bash
        pm2 reload all
        sudo systemctl restart nginx

* * *

5. 文档要求

-------

* 所有功能需补充 **Markdown 文档**，存放于 `/docs` 目录。
* 文档内容：
  * 功能说明。
  * 接口定义（如 Swagger）。
  * 数据库 schema。

* * *

6. 其他规则

-------

1. **安全性**：
   * 禁止硬编码敏感信息（如数据库密码），使用环境变量。
   * SQL 查询必须参数化，防止注入。
2. **性能**：
   * 数据库查询需添加索引。
   * 前端页面加载时间不超过 2 秒。
3. **备份**：
   * 每日自动备份数据库文件到 `/backup`。

* * *

7. 违规处理

-------

* 轻微违规（如代码风格问题）：团队内提醒。
* 严重违规（如直接推送 `main` 分支）：暂停合并权限 1 周。
